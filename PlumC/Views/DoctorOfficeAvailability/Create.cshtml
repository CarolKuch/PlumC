@model PlumC.Models.DoctorOfficeAvailability

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <h4>DoctorOfficeAvailability</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.OfficeId, "OfficeId", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("OfficeId", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.OfficeId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.DoctorId, "DoctorId", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("DoctorId", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.DoctorId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.DayOfWeek, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10" id="day" onclick="dayWasChosen()">
            @Html.EnumDropDownListFor(model => model.DayOfWeek)
            @Html.ValidationMessageFor(model => model.DayOfWeek, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10" onchange="dateWasChosen()">
            @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control ", @type = "date", id="date" } })
            @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.TimeStart, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.TimeStart, new { htmlAttributes = new { @class = "form-control", @type = "time" } })
            @Html.ValidationMessageFor(model => model.TimeStart, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.TimeEnd, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.TimeEnd, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.TimeEnd, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.IsDoctorAvailable, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.IsDoctorAvailable)
                @Html.ValidationMessageFor(model => model.IsDoctorAvailable, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            var dateNow = new Date();
            document.getElementById('date').value = dateNow.toJSON().slice(0, 10);
            document.getElementById('DayOfWeek').value = dateNow.getDay();
            document.getElementById('TimeStart').value = dateNow.getHours() + ":" + (new Date()).getMinutes();
        });

        function dayWasChosen() {
            var chosenDay = document.getElementById('DayOfWeek').value;
            var todaysDay = (new Date()).getDay();
            var chosenDate = new Date();

            var dayOffset = chosenDay > todaysDay
                ? chosenDay - todaysDay
                : chosenDay - todaysDay + 7;

            if (todaysDay != chosenDay) 
                chosenDate.setDate(chosenDate.getDate() + dayOffset);
            
            document.getElementById('date').value = chosenDate.toJSON().slice(0, 10);
        }

        function dateWasChosen() {
            var chosenDateValue = document.getElementById('date').value;
            var chosenDay = (new Date(chosenDateValue)).getDay();
            document.getElementById('DayOfWeek').value = chosenDay;
        }
    </script>
}
